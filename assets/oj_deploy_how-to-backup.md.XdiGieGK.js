import{_ as s,c as a,o as e,a3 as i}from"./chunks/framework.ZS1GtFyN.js";const g=JSON.parse('{"title":"如何备份","description":"","frontmatter":{},"headers":[],"relativePath":"oj/deploy/how-to-backup.md","filePath":"oj/deploy/how-to-backup.md","lastUpdated":null}'),o={name:"oj/deploy/how-to-backup.md"},l=i(`<h1 id="如何备份" tabindex="-1">如何备份 <a class="header-anchor" href="#如何备份" aria-label="Permalink to &quot;如何备份&quot;">​</a></h1><h3 id="_1-单体部署" tabindex="-1">1. 单体部署 <a class="header-anchor" href="#_1-单体部署" aria-label="Permalink to &quot;1. 单体部署&quot;">​</a></h3><p>请到<code>~/hoj-deploy/standAlone</code>的目录下，即是与<code>docker-compose.yml</code>的文件同个目录下，该目录下有个叫<code>hoj</code>的文件夹，里面的文件夹介绍如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hoj</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── file   		# 存储了上传的图片、上传的临时题目数据、markdown引用的文件等文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── judge  		# 存储了每个提交题目的评测过程产生的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── log    		# 存储了hoj-backend项目的运行日志</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── testcase    # 存储了题目的评测数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└── data        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ├── mysql</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    │   ├── data # 存储了MySQL数据库的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ├── redis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    │   ├── data # 存储了redis产生的快照数据</span></span></code></pre></div><p>那么，如果需要备份，只需将该<code>hoj</code>文件夹复制一份即可，在新的机器上重新部署新的hoj的时候，将该文件夹放置与<code>docker-compose.yml</code>一个目录下，使用<code>docker-compose up -d</code>即可启动恢复原来的数据。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意：在新机器上启用备份的数据的操作顺序如下：</p><ol><li>先将<code>hoj</code>文件夹先复制到<code>~/hoj-deploy/standAlone</code>目录里面（保证该目录无<code>hoj</code>文件夹，干净！）</li><li>然后修改<code>.env</code>文件的配置，主要是<code>Redis</code>,<code>Nacos</code>,<code>MySQL</code>等的密码配置，与原先备份<code>hoj</code>文件夹时的老机器的配置一致！</li><li>最后再使用<code>docker-compose up -d</code>启动！</li></ol></div><h3 id="_2-分布式部署" tabindex="-1">2. 分布式部署 <a class="header-anchor" href="#_2-分布式部署" aria-label="Permalink to &quot;2. 分布式部署&quot;">​</a></h3><ul><li><p>主服务器（运行hoj-backend的服务器）</p><p>请到<code>~/hoj-deploy/distributed/main</code>的目录下，即是与<code>docker-compose.yml</code>的文件同个目录下，该目录下有个叫<code>hoj</code>的文件夹，里面的文件夹介绍如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hoj</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── file   		# 存储了上传的图片、上传的临时题目数据、markdown引用的文件等文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── log    		# 存储了hoj-backend项目的运行日志</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── testcase    # 存储了题目的评测数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└── data        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ├── mysql</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    │   ├── data # 存储了MySQL数据库的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ├── redis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    │   ├── data # 存储了redis产生的快照数据</span></span></code></pre></div></li><li><p>判题服务器（运行hoj-judgeserver的服务器）</p><p>请到<code>~/hoj-deploy/distributed/judgeserver</code>的目录下，即是与<code>docker-compose.yml</code>的文件同个目录下，该目录下有个叫<code>judge</code>的文件夹，里面的文件夹介绍如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">judge</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── run  		# 存储了每个提交题目的评测过程产生的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── log    		# 存储了hoj-judgeserver项目的运行日志</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── test_case   # 存储了题目的评测数据(每100s从主服务器同步)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── spj         # 存储了SPJ的代码</span></span></code></pre></div></li></ul><p>那么，主要要备份的还是<strong>主服务器</strong>的数据，只需将该<code>hoj</code>文件夹复制一份即可，在新的机器上重新部署新的hoj的时候，将该文件夹放置与<code>docker-compose.yml</code>一个目录下，使用<code>docker-compose up -d</code>即可启动恢复原来的数据。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意：在新机器上启用备份的数据的操作顺序如下：</p><ol><li>先将<code>hoj</code>文件夹先复制到<code>~/hoj-deploy/distributed/main</code>目录里面（保证该目录无<code>hoj</code>文件夹，干净！）</li><li>然后修改<code>.env</code>文件的配置，主要是<code>Redis</code>,<code>Nacos</code>,<code>MySQL</code>等的密码配置，与原先备份<code>hoj</code>文件夹时的老机器的配置一致！</li><li>最后再使用<code>docker-compose up -d</code>启动！</li></ol></div>`,10),n=[l];function d(p,t,c,h,k,E){return e(),a("div",null,n)}const u=s(o,[["render",d]]);export{g as __pageData,u as default};
